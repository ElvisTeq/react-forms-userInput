## 1 Getting input data from Forms

- Implemented
  => "SimpleInput.js" (useRef, useState to get input data)

  - useRef => Good for only taking the input data

  - useState => Good for logging every key input and clearing input

///////////////////////////////////////////////////////////////////////////////////////////////////////

## 2 Adding validation Feedback with "useState"

- Implemented
  => "SimpleInput.js" (using useState(false/true) to toggle err message and "classNames")

///////////////////////////////////////////////////////////////////////////////////////////////////////

## 3 Handling/Using "was Touched" (useState)

A cleaner way of validating "##2", in order for "useState(false)" as default

- Implemented
  => "SimpleInput.js" (useState() to create "wasTouched" state to determine if the user has input anything before setting "useState(true)" )

\***\* IMPORTANT \*\*** To skip this #3

- Set useState(null) => So it wont start as "true/false"

///////////////////////////////////////////////////////////////////////////////////////////////////////

## 4 React onBlur (on loost Focus)

- Implemented
  => "SimpleInput.js" (Show error when input is wrong and looses focus)

------------------------------------------------------------- onBlur={}
React JSX build in Event (When input losses focus)

///////////////////////////////////////////////////////////////////////////////////////////////////////

## 5 Managing overall form Validity (disabling submit button)

- Implemented
  => "SimpleInput.js" (Disabling Button based on form Validation)

------------------------------------------------------------- disabled={true/false}
React JSX build in Event (To enable/disable)
Was used in a button

--------------------------- cursor: not-allowed;
CSS style

///////////////////////////////////////////////////////////////////////////////////////////////////////

## 6 dealing with duplication code with a custom hook

- Created
  => "use-input.js" (Custom hook to handle all functionality of "SimpleInput.js")

**\*** We can Re-Use Custom Hooks **\***

- Example
  => "SimpleInput.js" (Created another object using the custom hook for the email)

///////////////////////////////////////////////////////////////////////////////////////////////////////

## 7 Using useReducer (bonus practice)

- Implemented
  => "use-input.js" (Refactored code with useReducer)
